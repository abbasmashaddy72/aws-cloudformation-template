AWSTemplateFormatVersion: 2010-09-09
Description: VPC template for Zephyr-IT-Pro Project with conditional IGW and NAT Gateway

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - ProjectName
          - NumberOfAZs
          - EnableInternetGateway
          - EnableNatGateway
          - EnablePrivateSubnetWithoutNAT
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR

Parameters:
  ProjectName:
    Type: String
    Default: Zephyr-IT-Pro
    Description: Name of the project used for naming resources

  VpcCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.0.0.0/16
    Description: CIDR Block for the entire VPC
    Type: String

  NumberOfAZs:
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 2
      - 3
    Description: Number of Availability Zones to use (1-3)

  EnableInternetGateway:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Set to true to attach an Internet Gateway for public subnets. Elastic IP is used with NAT Gateway.

  EnableNatGateway:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Set to true to create a NAT Gateway with an Elastic IP for private subnet Internet access.

  EnablePrivateSubnetWithoutNAT:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Set to true to create private subnets without a NAT Gateway attached. NAT can be attached later if needed.

  PublicSubnet1CIDR:
    Default: 10.0.1.0/24
    Description: CIDR Block for Public Subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.2.0/24
    Description: CIDR Block for Public Subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.3.0/24
    Description: CIDR Block for Public Subnet 3
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.10.0/24
    Description: CIDR Block for Private Subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.11.0/24
    Description: CIDR Block for Private Subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.12.0/24
    Description: CIDR Block for Private Subnet 3
    Type: String

Conditions:
  UseIGW: !Equals [!Ref EnableInternetGateway, "true"]
  UseNATGW:
    !And [
      !Equals [!Ref EnableNatGateway, "true"],
      !Equals [!Ref EnablePrivateSubnetWithoutNAT, "false"],
    ]
  UseAZ1: !Equals [!Ref NumberOfAZs, 1]
  UseAZ2: !Or [!Equals [!Ref NumberOfAZs, 2], !Equals [!Ref NumberOfAZs, 3]]
  UseAZ3: !Equals [!Ref NumberOfAZs, 3]
  # Combined conditions for IGW and Availability Zones
  UseAZ1WithIGW: !And [!Condition UseIGW, !Condition UseAZ1]
  UseAZ2WithIGW: !And [!Condition UseIGW, !Condition UseAZ2]
  UseAZ3WithIGW: !And [!Condition UseIGW, !Condition UseAZ3]

Resources:
  # VPC definition
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  # Internet Gateway (conditionally created)
  InternetGateway:
    Condition: UseIGW
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} IGW"

  # Attach the Internet Gateway to the VPC (conditionally attached)
  AttachIGWtoVPC:
    Condition: UseIGW
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  # Elastic IP for NAT Gateway (conditionally created)
  ElasticIPForNAT:
    Condition: UseNATGW
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway (conditionally created)
  NatGateway:
    Condition: UseNATGW
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPForNAT.AllocationId
      SubnetId: !Ref VPCPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} NAT Gateway"

  # Public Subnets
  VPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Public Subnet 1"

  VPCPublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: UseAZ2
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Public Subnet 2"

  VPCPublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: UseAZ3
    Properties:
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Public Subnet 3"

  # Private Subnets
  VPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Subnet 1"

  VPCPrivateSubnet2:
    Condition: UseAZ2
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Subnet 2"

  VPCPrivateSubnet3:
    Condition: UseAZ3
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Subnet 3"

  # Public Route Table and Routes
  PublicRouteTable:
    Condition: UseIGW
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Public Route Table"

  # Route depends on Internet Gateway attachment
  PublicDefaultRoute:
    Condition: UseIGW
    Type: AWS::EC2::Route
    DependsOn: AttachIGWtoVPC
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  # Subnet route associations (conditionally created)
  PublicRouteSubnetAssociation1:
    Condition: UseAZ1WithIGW
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet1

  PublicRouteSubnetAssociation2:
    Condition: UseAZ2WithIGW
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet2

  PublicRouteSubnetAssociation3:
    Condition: UseAZ3WithIGW
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnet3

  # Private Route Table and Routes
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Route Table"

  # Private Default Route (only created if NAT Gateway is enabled)
  PrivateDefaultRoute:
    Condition: UseNATGW
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

  # Subnet route table associations for private subnets
  PrivateRouteSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnet1

  PrivateRouteSubnetAssociation2:
    Condition: UseAZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnet2

  PrivateRouteSubnetAssociation3:
    Condition: UseAZ3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnet3

Outputs:
  VPCId:
    Description: "VPC ID for the project"
    Value: !Ref MyVPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 ID"
    Value: !Ref VPCPublicSubnet1

  PublicSubnet2Id:
    Condition: UseAZ2
    Description: "Public Subnet 2 ID"
    Value: !Ref VPCPublicSubnet2

  PublicSubnet3Id:
    Condition: UseAZ3
    Description: "Public Subnet 3 ID"
    Value: !Ref VPCPublicSubnet3

  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref VPCPrivateSubnet1

  PrivateSubnet2Id:
    Condition: UseAZ2
    Description: "Private Subnet 2 ID"
    Value: !Ref VPCPrivateSubnet2

  PrivateSubnet3Id:
    Condition: UseAZ3
    Description: "Private Subnet 3 ID"
    Value: !Ref VPCPrivateSubnet3
