AWSTemplateFormatVersion: 2010-09-09
Description: Security Groups for Load Balancer, Web Servers, Database Server, Cache Server, and Worker Server with up to 6 trusted IPs for SSH access.

Parameters:
  # Parameters for VPC and Project Name
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC where the resources will be created.

  ProjectName:
    Type: String
    Default: Zephyr-IT-Pro
    Description: Name of the project used for naming resources.

  # Parameters for up to 6 Trusted IPs for SSH access
  TrustedIP1:
    Type: String
    Default: ""
    Description: First trusted IP for SSH access (e.g., 192.168.1.1/32).

  TrustedIP2:
    Type: String
    Default: ""
    Description: Second trusted IP for SSH access (e.g., 203.0.113.0/24).

  TrustedIP3:
    Type: String
    Default: ""
    Description: Third trusted IP for SSH access.

  TrustedIP4:
    Type: String
    Default: ""
    Description: Fourth trusted IP for SSH access.

  TrustedIP5:
    Type: String
    Default: ""
    Description: Fifth trusted IP for SSH access.

  TrustedIP6:
    Type: String
    Default: ""
    Description: Sixth trusted IP for SSH access.

  # Parameters for Trusted IPs for direct Database and Cache access
  TrustedIPForDBCache1:
    Type: String
    Default: ""
    Description: First trusted IP for direct Database and Cache access (e.g., 198.51.100.10/32).

  TrustedIPForDBCache2:
    Type: String
    Default: ""
    Description: Second trusted IP for direct Database and Cache access (e.g., 198.51.100.11/32).

Conditions:
  # Conditions to check if each Trusted IP is provided
  HasTrustedIP1: !Not [!Equals [!Ref TrustedIP1, ""]]
  HasTrustedIP2: !Not [!Equals [!Ref TrustedIP2, ""]]
  HasTrustedIP3: !Not [!Equals [!Ref TrustedIP3, ""]]
  HasTrustedIP4: !Not [!Equals [!Ref TrustedIP4, ""]]
  HasTrustedIP5: !Not [!Equals [!Ref TrustedIP5, ""]]
  HasTrustedIP6: !Not [!Equals [!Ref TrustedIP6, ""]]
  HasTrustedDBCacheIP1: !Not [!Equals [!Ref TrustedIPForDBCache1, ""]]
  HasTrustedDBCacheIP2: !Not [!Equals [!Ref TrustedIPForDBCache2, ""]]

Resources:
  # Security Group for SSH Access from Trusted IPs
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SSH Access from Trusted IPs
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-SSHSecurityGroup"
      SecurityGroupIngress:
        # Allows SSH (Port 22) access from each Trusted IP, only if provided
        - !If
          - HasTrustedIP1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP1
          - !Ref AWS::NoValue
        - !If
          - HasTrustedIP2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP2
          - !Ref AWS::NoValue
        - !If
          - HasTrustedIP3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP3
          - !Ref AWS::NoValue
        - !If
          - HasTrustedIP4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP4
          - !Ref AWS::NoValue
        - !If
          - HasTrustedIP5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP5
          - !Ref AWS::NoValue
        - !If
          - HasTrustedIP6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref TrustedIP6
          - !Ref AWS::NoValue

  # Security Groups for Load Balancer, Web Servers, Database Server, Cache Server, and Worker Servers
  # Created first without rules to avoid circular dependency issues

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-LoadBalancerSG"

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Web Servers
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-WebServerSG"

  DatabaseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Database Server
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DatabaseServerSG"

  CacheServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Cache Server
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-CacheServerSG"

  WorkerServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Worker Servers
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-WorkerServerSG"

  # Ingress Rules for Load Balancer (HTTP/HTTPS access)
  LoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0 # Open HTTP (Port 80) to all

  LoadBalancerIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0 # Open HTTPS (Port 443) to all

  # Ingress Rules for Web Servers (Allowing access from Load Balancer)
  WebServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup # HTTP from Load Balancer

  WebServerIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup # HTTPS from Load Balancer

  # Ingress Rules for Database Server
  DatabaseServerIngressWeb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseServerSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WebServerSecurityGroup # MySQL access from Web Servers

  DatabaseServerIngressWorker:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseServerSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WorkerServerSecurityGroup # MySQL access from Worker Servers

  # Trusted IPs for direct access to Database Server (MySQL)
  DatabaseServerIngressTrustedIP1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP1
    Properties:
      GroupId: !Ref DatabaseServerSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref TrustedIPForDBCache1 # MySQL access from Trusted IP 1

  DatabaseServerIngressTrustedIP2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP2
    Properties:
      GroupId: !Ref DatabaseServerSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref TrustedIPForDBCache2 # MySQL access from Trusted IP 2

  # Ingress Rules for Cache Server (Redis and Memcached)
  CacheServerIngressWeb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref WebServerSecurityGroup # Redis access from Web Servers

  CacheServerIngressWorker:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref WorkerServerSecurityGroup # Redis access from Worker Servers

  # Trusted IPs for direct access to Cache Server (Redis)
  CacheServerIngressTrustedIP1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP1
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: !Ref TrustedIPForDBCache1 # Redis access from Trusted IP 1

  CacheServerIngressTrustedIP2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP2
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: !Ref TrustedIPForDBCache2 # Redis access from Trusted IP 2

  # Memcached Ingress Rules for Cache Server
  CacheServerMemcachedIngressWeb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: !Ref WebServerSecurityGroup # Memcached access from Web Servers

  CacheServerMemcachedIngressWorker:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: !Ref WorkerServerSecurityGroup # Memcached access from Worker Servers

  # Trusted IPs for direct access to Cache Server (Memcached)
  CacheServerMemcachedIngressTrustedIP1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP1
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      CidrIp: !Ref TrustedIPForDBCache1 # Memcached access from Trusted IP 1

  CacheServerMemcachedIngressTrustedIP2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasTrustedDBCacheIP2
    Properties:
      GroupId: !Ref CacheServerSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      CidrIp: !Ref TrustedIPForDBCache2 # Memcached access from Trusted IP 2

  # Ingress Rules for Worker Servers
  WorkerServerIngressMySQL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WorkerServerSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref DatabaseServerSecurityGroup # MySQL access for Worker Servers

  WorkerServerIngressRedis:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WorkerServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref CacheServerSecurityGroup # Redis access for Worker Servers

  WorkerServerIngressMemcached:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WorkerServerSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: !Ref CacheServerSecurityGroup # Memcached access for Worker Servers
